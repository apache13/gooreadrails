# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
#   Mayor.create(name: 'Emanuel', city: cities.first)

Book.create(title:'Chicago',description:'This guide focuses on the interaction between Controller and View in the Model-View-Controller triangle. As you know, the Controller is responsible for orchestrating the whole process of handling a request in Rails, though it normally hands off any heavy code to the Model. But then, when it is time to send a response back to the user, the Controller hands things off to the View. It is that handoff that is the subject of this guide.',price:10.0,image:'1.jpg')
Book.create(title:'The Art of Immersion',description:'This guide focuses on the interaction between Controller and View in the Model-View-Controller triangle. As you know, the Controller is responsible for orchestrating the whole process of handling a request in Rails, though it normally hands off any heavy code to the Model. But then, when it is time to send a response back to the user, the Controller hands things off to the View. It is that handoff that is the subject of this guide.',price:10.0,image:'2.jpg')
Book.create(title:'The Spies',description:'This guide focuses on the interaction between Controller and View in the Model-View-Controller triangle. As you know, the Controller is responsible for orchestrating the whole process of handling a request in Rails, though it normally hands off any heavy code to the Model. But then, when it is time to send a response back to the user, the Controller hands things off to the View. It is that handoff that is the subject of this guide.',price:10.0,image:'3.jpg')
Book.create(title:'A Clockwork Orange',description:'This guide focuses on the interaction between Controller and View in the Model-View-Controller triangle. As you know, the Controller is responsible for orchestrating the whole process of handling a request in Rails, though it normally hands off any heavy code to the Model. But then, when it is time to send a response back to the user, the Controller hands things off to the View. It is that handoff that is the subject of this guide.',price:10.0,image:'4.jpg')
Book.create(title:'Critique and Disclosure',description:'This guide focuses on the interaction between Controller and View in the Model-View-Controller triangle. As you know, the Controller is responsible for orchestrating the whole process of handling a request in Rails, though it normally hands off any heavy code to the Model. But then, when it is time to send a response back to the user, the Controller hands things off to the View. It is that handoff that is the subject of this guide.',price:10.0,image:'5.jpg')
Book.create(title:'Captain Jinks',description:'This guide focuses on the interaction between Controller and View in the Model-View-Controller triangle. As you know, the Controller is responsible for orchestrating the whole process of handling a request in Rails, though it normally hands off any heavy code to the Model. But then, when it is time to send a response back to the user, the Controller hands things off to the View. It is that handoff that is the subject of this guide.',price:10.0,image:'6.jpg')
